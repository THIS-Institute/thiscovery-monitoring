Transform: AWS::Serverless-2016-10-31
Resources:
  RaiseError:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RaiseError
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RaiseError
      CodeUri: src
      Handler: alarms.raise_error
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        Timer6:
          Type: Schedule
          Properties:
            Schedule: cron(0 8 ? * 2 *)
          Metadata:
            StackeryName: TriggerRaiseError
  Auth0Events:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: user_name
          AttributeType: S
        - AttributeName: event_date
          AttributeType: S
        - AttributeName: event_type
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: event_type
          KeyType: HASH
        - AttributeName: event_date
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TableName: !Sub ${AWS::StackName}-Auth0Events
      GlobalSecondaryIndexes:
        - IndexName: GSI-user-date
          KeySchema:
            - AttributeName: user_name
              KeyType: HASH
            - AttributeName: event_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  PersistAuth0Event:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-PersistAuth0Event
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: PersistAuth0Event
      CodeUri: src
      Handler: auth0_event_logging.persist_auth0_event
      Runtime: python3.7
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Auth0Events
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          TABLE_NAME: !Ref Auth0Events
          TABLE_ARN: !GetAtt Auth0Events.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        EventRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Auth0 log
              detail:
                data:
                  type:
                    - f
                    - fcp
                    - fcpr
                    - fcu
                    - fn
                    - fp
                    - fs
                    - fu
                    - fv
                    - fvr
                    - limit_mu
                    - limit_wc
                    - pwd_leak
                    - s
                    - sce
                    - scp
                    - slo
                    - ss
                    - sv
                    - svr
                    - unlkdu
                    - w
            EventBusName: !Ref EnvConfigeventbridgeauth0eventbusAsString
          Metadata:
            StackeryName: PersistAuth0EventsRule
  CalculateAuth0Metrics:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CalculateAuth0Metrics
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CalculateAuth0Metrics
      CodeUri: src
      Handler: auth0_metrics.calculate_auth0_metrics
      Runtime: python3.7
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref Auth0Events
        - CloudWatchFullAccess
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TABLE_NAME: !Ref Auth0Events
          TABLE_ARN: !GetAtt Auth0Events.Arn
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
            Input: '{"hours": "1"}'
          Metadata:
            StackeryName: TriggerHourlyMetricsCalculation
        Timer2:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Input: '{"hours": "24"}'
          Metadata:
            StackeryName: TriggerDailyMetricsCalculation
  EmailServiceAlarmTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-EmailServiceAlarmTest
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: EmailServiceAlarmTest
      CodeUri: src
      Handler: alarms.email_service_alarm_test
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        Timer3:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
          Metadata:
            StackeryName: TriggerEmailServiceAlarmTest
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
  InterviewsServiceAlarmTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-InterviewsServiceAlarmT
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: InterviewsServiceAlarmTest
      CodeUri: src
      Handler: alarms.interviews_service_alarm_test
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        Timer4:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
          Metadata:
            StackeryName: TriggerInterviewsServiceAlarmTest
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
  SurveysServiceAlarmTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SurveysServiceAlarmTest
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: SurveysServiceAlarmTest
      CodeUri: src
      Handler: alarms.surveys_service_alarm_test
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        Timer5:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
          Metadata:
            StackeryName: TriggerSurveysServiceAlarmTest
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
  CoreServiceAlarmTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CoreServiceAlarmTest
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CoreServiceAlarmTest
      CodeUri: src
      Handler: alarms.core_service_alarm_test
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        Timer7:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
          Metadata:
            StackeryName: TriggerCoreServiceAlarmTest
  EventsAlarmTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-EventsAlarmTest
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: EventsAlarmTest
      CodeUri: src
      Handler: alarms.events_alarm_test
      Runtime: python3.7
      MemorySize: !Ref EnvConfiglambdamemorysizeAsString
      Timeout: !Ref EnvConfiglambdatimeoutAsString
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
      Events:
        Timer8:
          Type: Schedule
          Properties:
            Schedule: rate(6 hours)
          Metadata:
            StackeryName: TriggerEventsAlarmTest
  MetricAlarms:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-MetricAlarms
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvConfiglambdamemorysizeAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/memory-size
  EnvConfiglambdatimeoutAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/lambda/timeout
  EnvConfigeventbridgeauth0eventbusAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/eventbridge/auth0-event-bus
Metadata:
  EnvConfigParameters:
    EnvConfiglambdamemorysizeAsString: lambda.memory-size
    EnvConfiglambdatimeoutAsString: lambda.timeout
    EnvConfigeventbridgeauth0eventbusAsString: eventbridge.auth0-event-bus